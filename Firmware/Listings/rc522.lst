C51 COMPILER V9.54   RC522                                                                 11/30/2020 18:37:47 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE RC522
OBJECT MODULE PLACED IN .\Objects\rc522.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE rc522.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\rc5
                    -22.lst) OBJECT(.\Objects\rc522.obj)

line level    source

   1          /*
   2          **********************************************************************
   3          *                         头文件包含
   4          **********************************************************************
   5          */
   6          #include <reg52.h>
   7          #include <intrins.h>
   8          #include <string.h> 
   9          
  10          #include "rc522.h"
  11          
  12          
  13          /*
  14          **********************************************************************
  15          *                         本地全局变量
  16          **********************************************************************
  17          */
  18          // 专用SFR
  19          sfr   RCAP2LH =   0xCA;
  20          sfr   T2LH    =   0xCC;                        
  21          
  22          // RC522 SPI接口定义
  23          sbit     MF522_NSS  =    P2^0;          //这是SDA
  24          sbit     MF522_SCK  =    P2^1;
  25          sbit     MF522_SI   =    P2^2;
  26          sbit     MF522_SO   =    P2^3;
  27          sbit     MF522_RST  =    P2^4;          //RC500片选
  28          
  29          /****************RC522驱动源码**************************************/
  30          
  31          /////////////////////////////////////////////////////////////////////
  32          //功    能：寻卡
  33          //参数说明: req_code[IN]:寻卡方式
  34          //                0x52 = 寻感应区内所有符合14443A标准的卡
  35          //                0x26 = 寻未进入休眠状态的卡
  36          //          pTagType[OUT]：卡片类型代码
  37          //                0x4400 = Mifare_UltraLight
  38          //                0x0400 = Mifare_One(S50)
  39          //                0x0200 = Mifare_One(S70)
  40          //                0x0800 = Mifare_Pro(X)
  41          //                0x4403 = Mifare_DESFire
  42          //返    回: 成功返回MI_OK
  43          /////////////////////////////////////////////////////////////////////
  44          char PcdRequest(unsigned char req_code,unsigned char *pTagType){
  45   1         char status;  
  46   1         unsigned int  unLen;
  47   1         unsigned char ucComMF522Buf[MAXRLEN]; 
  48   1         ClearBitMask(Status2Reg,0x08);
  49   1         WriteRawRC(BitFramingReg,0x07);
  50   1         SetBitMask(TxControlReg,0x03);
  51   1         ucComMF522Buf[0] = req_code;
  52   1         status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,1,ucComMF522Buf,&unLen);
  53   1         if ((status == MI_OK) && (unLen == 0x10))
  54   1         {    
C51 COMPILER V9.54   RC522                                                                 11/30/2020 18:37:47 PAGE 2   

  55   2             *pTagType     = ucComMF522Buf[0];
  56   2             *(pTagType+1) = ucComMF522Buf[1];
  57   2         }
  58   1         else
  59   1         {   status = MI_ERR;   }   
  60   1         return status;
  61   1      }
  62          
  63          /////////////////////////////////////////////////////////////////////
  64          //功    能：防冲撞
  65          //参数说明: pSnr[OUT]:卡片序列号，4字节
  66          //返    回: 成功返回MI_OK
  67          /////////////////////////////////////////////////////////////////////  
  68          char PcdAnticoll(unsigned char *pSnr)
  69          {
  70   1          char status;
  71   1          unsigned char i,snr_check=0;
  72   1          unsigned int  unLen;
  73   1          unsigned char ucComMF522Buf[MAXRLEN]; 
  74   1          
  75   1      
  76   1          ClearBitMask(Status2Reg,0x08);
  77   1          WriteRawRC(BitFramingReg,0x00);
  78   1          ClearBitMask(CollReg,0x80);
  79   1       
  80   1          ucComMF522Buf[0] = PICC_ANTICOLL1;
  81   1          ucComMF522Buf[1] = 0x20;
  82   1      
  83   1          status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,2,ucComMF522Buf,&unLen);
  84   1      
  85   1          if (status == MI_OK)
  86   1          {
  87   2               for (i=0; i<4; i++)
  88   2               {   
  89   3                   *(pSnr+i)  = ucComMF522Buf[i];
  90   3                   snr_check ^= ucComMF522Buf[i];
  91   3               }
  92   2               if (snr_check != ucComMF522Buf[i])
  93   2               {   status = MI_ERR;    }
  94   2          }
  95   1          
  96   1          SetBitMask(CollReg,0x80);
  97   1          return status;
  98   1      }
  99          
 100          /////////////////////////////////////////////////////////////////////
 101          //功    能：复位RC522
 102          //返    回: 成功返回MI_OK
 103          /////////////////////////////////////////////////////////////////////
 104          char PcdReset(void){
 105   1          MF522_RST=1;
 106   1          _nop_();//空机器指令
 107   1          MF522_RST=0;
 108   1          _nop_();
 109   1          MF522_RST=1;
 110   1           _nop_();
 111   1          WriteRawRC(CommandReg,PCD_RESETPHASE); //往寄出去地址01，写0x0F
 112   1              _nop_();
 113   1                  
 114   1      
 115   1          WriteRawRC(ModeReg,0x3D);            //和Mifare卡通讯，CRC初始值0x6363，CRCPreset=01
 116   1          WriteRawRC(TReloadRegL,30);          //定时器重装值，分为两个8位寄存器，初始值都为0x00      
C51 COMPILER V9.54   RC522                                                                 11/30/2020 18:37:47 PAGE 3   

 117   1          WriteRawRC(TReloadRegH,0);
 118   1          WriteRawRC(TModeReg,0x8D);           //内部定时器的设置1000 1101,后四位为TPrescalerReg的高四位
 119   1          WriteRawRC(TPrescalerReg,0x3E);      //为TPregScaler低8位，Ftimer = 6.78MHZ/TPreScaler
 120   1          WriteRawRC(TxAutoReg,0x40);     
 121   1          return MI_OK;
 122   1      }
 123          //////////////////////////////////////////////////////////////////////
 124          //设置RC632的工作方式 
 125          //////////////////////////////////////////////////////////////////////
 126          char M500PcdConfigISOType(unsigned char type){
 127   1         if (type == 'A')                     //ISO14443_A
 128   1         { 
 129   2             ClearBitMask(Status2Reg,0x08);
 130   2             WriteRawRC(ModeReg,0x3D);//3
 131   2             WriteRawRC(RxSelReg,0x86);//
 132   2             WriteRawRC(RFCfgReg,0x7F);   //4F
 133   2                 WriteRawRC(TReloadRegL,30);//tmoLength);// TReloadVal = 'h6a =tmoLength(dec) 
 134   2                 WriteRawRC(TReloadRegH,0);
 135   2             WriteRawRC(TModeReg,0x8D);
 136   2                 WriteRawRC(TPrescalerReg,0x3E);
 137   2                  delay_10ms(1);
 138   2             PcdAntennaOn();
 139   2         }
 140   1         else{ return -1; }
 141   1         
 142   1         return MI_OK;
 143   1      }
 144          /////////////////////////////////////////////////////////////////////
 145          //功    能：读RC632寄存器
 146          //参数说明：Address[IN]:寄存器地址
 147          //返    回：读出的值
 148          /////////////////////////////////////////////////////////////////////
 149          unsigned char ReadRawRC(unsigned char Address){
 150   1           unsigned char i, ucAddr;
 151   1           unsigned char ucResult=0;
 152   1      
 153   1           MF522_SCK = 0;
 154   1           MF522_NSS = 0;
 155   1           ucAddr = ((Address<<1)&0x7E)|0x80;
 156   1      
 157   1           for(i=8;i>0;i--)
 158   1           {
 159   2               MF522_SI = ((ucAddr&0x80)==0x80);
 160   2               MF522_SCK = 1;
 161   2               ucAddr <<= 1;
 162   2               MF522_SCK = 0;
 163   2           }
 164   1      
 165   1           for(i=8;i>0;i--)
 166   1           {
 167   2               MF522_SCK = 1;
 168   2               ucResult <<= 1;
 169   2               ucResult|=(bit)MF522_SO;
 170   2               MF522_SCK = 0;
 171   2           }
 172   1      
 173   1           MF522_NSS = 1;
 174   1           MF522_SCK = 1;
 175   1           return ucResult;
 176   1      } 
 177          
 178          /////////////////////////////////////////////////////////////////////
C51 COMPILER V9.54   RC522                                                                 11/30/2020 18:37:47 PAGE 4   

 179          //功    能：写RC632寄存器
 180          //参数说明：Address[IN]:寄存器地址
 181          //          value[IN]:写入的值
 182          /////////////////////////////////////////////////////////////////////
 183          void WriteRawRC(unsigned char Address, unsigned char value){  
 184   1          unsigned char i, ucAddr;
 185   1      
 186   1          MF522_SCK = 0;
 187   1          MF522_NSS = 0;
 188   1          ucAddr = ((Address<<1)&0x7E);
 189   1      
 190   1          for(i=8;i>0;i--)
 191   1          {
 192   2              MF522_SI = ((ucAddr&0x80)==0x80);
 193   2              MF522_SCK = 1;
 194   2              ucAddr <<= 1;
 195   2              MF522_SCK = 0;
 196   2          }
 197   1      
 198   1          for(i=8;i>0;i--)
 199   1          {
 200   2              MF522_SI = ((value&0x80)==0x80);
 201   2              MF522_SCK = 1;
 202   2              value <<= 1;
 203   2              MF522_SCK = 0;
 204   2          }
 205   1          MF522_NSS = 1;
 206   1          MF522_SCK = 1;
 207   1      }
 208          
 209          /////////////////////////////////////////////////////////////////////
 210          //功    能：置RC522寄存器位
 211          //参数说明：reg[IN]:寄存器地址
 212          //          mask[IN]:置位值
 213          /////////////////////////////////////////////////////////////////////
 214          void SetBitMask(unsigned char reg,unsigned char mask)  
 215          {
 216   1          char tmp = 0x0;
 217   1          tmp = ReadRawRC(reg);
 218   1          WriteRawRC(reg,tmp | mask);  // set bit mask
 219   1      }
 220          
 221          /////////////////////////////////////////////////////////////////////
 222          //功    能：清RC522寄存器位
 223          //参数说明：reg[IN]:寄存器地址
 224          //          mask[IN]:清位值
 225          /////////////////////////////////////////////////////////////////////
 226          void ClearBitMask(unsigned char reg,unsigned char mask)  
 227          {
 228   1          char tmp = 0x0;
 229   1          tmp = ReadRawRC(reg);
 230   1          WriteRawRC(reg, tmp & ~mask);  // clear bit mask
 231   1      }
 232          
 233          /////////////////////////////////////////////////////////////////////
 234          //功    能：通过RC522和ISO14443卡通讯
 235          //参数说明：Command[IN]:RC522命令字
 236          //          pInData[IN]:通过RC522发送到卡片的数据
 237          //          InLenByte[IN]:发送数据的字节长度
 238          //          pOutData[OUT]:接收到的卡片返回数据
 239          //          *pOutLenBit[OUT]:返回数据的位长度
 240          /////////////////////////////////////////////////////////////////////
C51 COMPILER V9.54   RC522                                                                 11/30/2020 18:37:47 PAGE 5   

 241          char PcdComMF522(unsigned char Command, 
 242                           unsigned char *pInData, 
 243                           unsigned char InLenByte,
 244                           unsigned char *pOutData, 
 245                           unsigned int  *pOutLenBit)
 246          {
 247   1          char status = MI_ERR;
 248   1          unsigned char irqEn   = 0x00;
 249   1          unsigned char waitFor = 0x00;
 250   1          unsigned char lastBits;
 251   1          unsigned char n;
 252   1          unsigned int i;
 253   1          switch (Command)
 254   1          {
 255   2             case PCD_AUTHENT:
 256   2                irqEn   = 0x12;
 257   2                waitFor = 0x10;
 258   2                break;
 259   2             case PCD_TRANSCEIVE:
 260   2                irqEn   = 0x77;
 261   2                waitFor = 0x30;
 262   2                break;
 263   2             default:
 264   2               break;
 265   2          }
 266   1         
 267   1          WriteRawRC(ComIEnReg,irqEn|0x80);
 268   1          ClearBitMask(ComIrqReg,0x80);
 269   1          WriteRawRC(CommandReg,PCD_IDLE);
 270   1          SetBitMask(FIFOLevelReg,0x80);
 271   1          
 272   1          for (i=0; i<InLenByte; i++)
 273   1          {   WriteRawRC(FIFODataReg, pInData[i]);    }
 274   1          WriteRawRC(CommandReg, Command);
 275   1         
 276   1          
 277   1          if (Command == PCD_TRANSCEIVE)
 278   1          {    SetBitMask(BitFramingReg,0x80);  }
 279   1          
 280   1      //    i = 600;//根据时钟频率调整，操作M1卡最大等待时间25ms
 281   1       i = 2000;//900,1100,1700,2000,2700
 282   1          do 
 283   1          {
 284   2               n = ReadRawRC(ComIrqReg);
 285   2               i--;
 286   2          }
 287   1          while ((i!=0) && !(n&0x01) && !(n&waitFor));
 288   1          ClearBitMask(BitFramingReg,0x80);
 289   1                    
 290   1          if (i!=0)
 291   1          {    
 292   2               if(!(ReadRawRC(ErrorReg)&0x1B))
 293   2               {
 294   3                   status = MI_OK;
 295   3                   if (n & irqEn & 0x01)
 296   3                   {   status = MI_NOTAGERR;   }
 297   3                   if (Command == PCD_TRANSCEIVE)
 298   3                   {
 299   4                      n = ReadRawRC(FIFOLevelReg);
 300   4                      lastBits = ReadRawRC(ControlReg) & 0x07;
 301   4                      if (lastBits)
 302   4                      {   *pOutLenBit = (n-1)*8 + lastBits;   }
C51 COMPILER V9.54   RC522                                                                 11/30/2020 18:37:47 PAGE 6   

 303   4                      else
 304   4                      {   *pOutLenBit = n*8;   }
 305   4                      if (n == 0)
 306   4                      {   n = 1;    }
 307   4                      if (n > MAXRLEN)
 308   4                      {   n = MAXRLEN;   }
 309   4                      for (i=0; i<n; i++)
 310   4                      {   pOutData[i] = ReadRawRC(FIFODataReg);    }
 311   4                                      
 312   4                  }
 313   3               }
 314   2               else
 315   2               {   status = MI_ERR;   }
 316   2         }
 317   1         
 318   1      
 319   1         SetBitMask(ControlReg,0x80);           // stop timer now
 320   1         WriteRawRC(CommandReg,PCD_IDLE); 
 321   1         return status;
 322   1      }
 323          
 324          
 325          /////////////////////////////////////////////////////////////////////
 326          //开启天线  
 327          //每次启动或关闭天线之间应至少有1ms的间隔
 328          /////////////////////////////////////////////////////////////////////
 329          void PcdAntennaOn(){
 330   1          unsigned char i;
 331   1          i = ReadRawRC(TxControlReg);
 332   1          if (!(i & 0x03))
 333   1          {
 334   2              SetBitMask(TxControlReg, 0x03);
 335   2          }
 336   1      }
 337          
 338          
 339          /////////////////////////////////////////////////////////////////////
 340          //关闭天线
 341          /////////////////////////////////////////////////////////////////////
 342          void PcdAntennaOff()
 343          {
 344   1          ClearBitMask(TxControlReg, 0x03);
 345   1      }
 346          
 347          
 348          ///////////////////////////////////////////////////////////////////////
 349          // Delay 10ms
 350          ///////////////////////////////////////////////////////////////////////
 351          void delay_10ms(unsigned int _10ms)
 352          {
 353   1      #ifndef NO_TIMER2
 354   1          RCAP2LH = RCAP2_10ms;
 355   1          T2LH    = RCAP2_10ms;
 356   1          
 357   1          TR2 = TRUE;
 358   1          while (_10ms--)
 359   1          {
 360   2                  while (!TF2);
 361   2                  TF2 = FALSE;
 362   2          }
 363   1          TR2 = FALSE;
 364   1      #else
C51 COMPILER V9.54   RC522                                                                 11/30/2020 18:37:47 PAGE 7   

                  while (_10ms--)
                  {
                          delay_50us(19);
                          if (CmdValid)
                              return;
                          delay_50us(20);
                          if (CmdValid)
                              return;
                          delay_50us(20);
                          if (CmdValid)
                              return;
                          delay_50us(20);
                          if (CmdValid)
                              return;
                          delay_50us(20);
                          if (CmdValid )
                              return;
                          delay_50us(20);
                          if (CmdValid)
                              return;
                          delay_50us(20);
                          if (CmdValid)
                              return;
                          delay_50us(20);
                          if (CmdValid)
                              return;
                          delay_50us(20);
                          if (CmdValid)
                              return;
                          delay_50us(19);
                          if (CmdValid)
                              return;
                  }
              #endif
 399   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    948    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      66
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
